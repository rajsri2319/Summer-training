1.Write code on Nqueen Program:
//code//
def Solution(board, N):
    for i in range(N):
        for j in range(N):
            if board[i][j] == 1:
                print("Q", end=" ")
            else:
                print("-", end=" ")
        print()
def Safe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True
def solveNqutil(board, col, N):
    if col >= N:
        return True
    for i in range(N):
        if Safe(board, i, col):
            board[i][col] = 1
            if solveNqutil(board, col + 1, N):
                return True
            board[i][col] = 0
    return False

def SolveNqueen(N):
    board = [[0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0]]
    if solveNqutil(board, 0, N) == False:
        return False
    Solution(board, N)
    return True

if __name__ == '__main__':
    N = 4
    SolveNqueen(N)

o/p:
- - Q - 
Q - - - 
- - - Q 
- Q - - 
2.Take i/p as 2,3,5,6 and k=7 using  dynamic programming
//code//
def noofCoins(coins,k):
    dp=[[0 for _ in range(k+1)]for _ in range(len(coins))]
    for i in range(coins[0]+1):
        if i%coins[0]==0:
            dp[0][i]=1
    for i in range(1,len(coins)):
        j=0
        while j<=k:3.
            if j<coins[i]:
                dp[i][j]=dp[i-1][j]
            else:
                a=j-coins[i]
                if dp[i-1][a]:
                    dp[i][j]=1
                else:
                    dp[i][j]=dp[i-1][j]
            j+=1
    for i in dp:
        print(i)
    if dp[-1][-1]:
        print("yes")
    else:
        print("No")
coins=[2,3,5,6]
k=7
noofCoins(coins,k)
o/p:
[1, 0, 1, 0, 0, 0, 0, 0]
[1, 0, 1, 1, 0, 1, 0, 0]
[1, 0, 1, 1, 0, 1, 0, 1]
[1, 0, 1, 1, 0, 1, 1, 1]
7                
3.Take i/p as tu5g2k1h8 g5g8gd6h3 o/p is 865312 Print Largest even number
//code//
a=input()
b=input()
c=set()
for i in a:
    if(i.isdigit()):
        c.add(i)
for i in b:
    if(i.isdigit()):
        c.add(i)
d=list(sorted(c,reverse=True))
if(int(d[-1])%2==0):
    print(''.join(d))
else:
    for i in range(len(d)-2,-1,-1):
        if(int(d[i])%2==0):
            d.append(d.pop(i))
            print(''.join(d))
            break
    else:
        print(-1)
o/p:
tu5g2k1h8
g5g8gd6h3
865312
4.Print Palindromic number or not if it is not palindromic number then print nearest number of palindromic number
//code//
def Palindrome(n):
    return list(n)==list(reversed(n))
def NearestPalindrome(n):
    if Palindrome(str(n)):
        print(n)
    else:
        while True:
            n+=1
            if Palindrome(str(n)):
                print(n)
                break
NearestPalindrome(24)
o/p:
33
5.Print Palindromic number or not if it is not palindromic number then print nearest number of palindromic number with logic
//code//
def ispalindrome(n):
    return str(n)==str(n)[::-1]
def nextpalindrome(n):
    while True:
        n+=1
        if ispalindrome(n):
            return n
def palindrome(n):
    if ispalindrome(n):
        return n
    else:
        return nextpalindrome(n)
def Logic(n):
    l=len(n)//2
    x=n[:l]
    if len(n)%2==1:
        if int(x+str(int(n[l]))+x[::-1])>int(n):
            print(x+str(int(n[l]))+x[::-1])
        else:
            print(x+str(int(n[l])+1)+x[::-1])
    else:
        if int(x+x[::-1])>int(n):
            print(x+x[::-1])
        else:
            x=str(int(x)+1)
            print(x+x[::-1])        
n=input()
Logic(n)
o/p
76528
76567
         
                
    
    
