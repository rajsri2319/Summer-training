1.Dijkstras Alogarithm :
//code//
def dijkstra(g,s):
    d={5:9999,1:9999,3:9999,2:9999,4:9999}
    d[s]=0
    vi=[]
    q=[s]
    while(q):
        m=9999
        for i in q:
            if(d[i]<m):
                m=d[i]
                s=i
        for i in g[s]:
            if(i[0] not in vi):
                q.append(i[0])
                if d[i[0]]>i[1]+d[s]:
                    d[i[0]]=i[1]+d[s]
        vi.append(s)
        q.remove(s)
    return d
g={1:[(3,1),(2,2),(4,2)],2:[(1,2),(5,3),(4,2)],3:[(1,1),(4,1)],4:[(3,1),(1,2),(2,2),(5,4)],5:[(2,3),(4,4)]}
print(dijkstra(g,5))
o/p:{5: 0, 1: 5, 3: 5, 2: 3, 4: 4}
2.BFs Program:
//code//
def Bfs(d,n):
    vi=[]
    q=[n]
    while(q):
        for i in d[q[0]]:
            if i[0] not in q and i[0] not in vi:
                q.append(i[0])
        vi.append(q.pop(0))
        print(vi[-1])
d={5:[(7,2),(3,2)],7:[(5,2),(4,8),(3,3)],4:[(7,8),(8,4),(2,5)],8:[(3,1),(4,4),(2,4)],3:[(5,2),(7,3),(8,1)],2:[(4,5),(8,4)]}
(Bfs(d,5))
o/p:5
7
3
4
8
2
3.Match EvenOdd and do the sum:
//code//
def matchEvenOdd(nums1,nums2):
    def addOdd(n,nums2):
        if not nums2:
            return 
        if nums2[0]%2==1:
            res.append(n+nums2[0])
        addOdd(n,nums2[1:])
    if not nums1:
        return 
    if nums1[0]%2==0:
        addOdd(nums1[0],nums2)
    matchEvenOdd(nums1[1:],nums2)
nums1=[6,3,2,9,4,7]
nums2=[8,7,5,3,6,9]
res=[]
matchEvenOdd(nums1,nums2)
print(res)
o/p:[13, 11, 9, 15, 9, 7, 5, 11, 11, 9, 7, 13]
4.Programs on graph
//code//def dfs(graph,s):
    print(l)
    l.append(s)
    for i in graph[s]:
        if i not in l:
            dfs(graph,i)
def Bfs(graph,s):
    visited=[]
    queue=[s]
    while(s):
        key==queue
        if queue not in visited:
            queue.append(s)
            if queue in visited:
                queue.pop(s)
    return visited
def allPaths(graph,s,e,path):
    path=path+str(s)
    l.append(s)
    if s==e:
        print("->".join(path))
        l.pop()
        return 
    for i in graph[s]:
        if i[0] not in l:
            allPaths(graph,i[0],e,path)
    l.pop()

def costOfAllPaths(graph,s,e,path,c):
    path=path+str(s)
    l.append(s)
    if s==e:
        print("->".join(path),", cost : ",c)
        l.pop()
        return 
    for i in graph[s]:
        if i[0] not in l:
            costOfAllPaths(graph,i[0],e,path,c+i[1])
    l.pop()

def minCostPath(graph,s,e,path,c,min_c,min_path):
    path=path+str(s)
    l.append(s)
    if s==e:
        if c<min_c:
            min_c=c
            min_path=path
        l.pop()
        return (min_c,min_path)
    for i in graph[s]:
        if i[0] not in l:
            min_c,min_path=minCostPath(graph,i[0],e,path,c+i[1],min_c,min_path)
    l.pop()
    return (min_c,min_path)
def dijkstras(graph,s):
    visited=[]
    queue=[s]
    costomforms[s]=0
    while queue:
        c,curr=min(queue)
        m 
        
        
    
def allPossiblePaths(graph,s):
    path=path+str(s)
    l.append(s)
    for i in graph[s]:
        if i[0] not in l:
            allPossiblePaths(graph,i[0],path)
    print(" ->".join(path))
    l.pop()
    for node in graph.keys():
        min_c,min_path=minCostPath(graph,s,node,"",0,9999999,"")
        print(f"minimum cost path from {s} to {node} is {'->'.join(min_path)} with minimum cost = {min_c}")


graph={5:[7,3],7:[5,4,3],4:[7,8,2],8:[3,4,2],3:[5,7,8],2:[4,8]}
dfs(graph,5)
l=[]
graph={5:[(7,2),(3,2)],7:[(5,2),(4,8),(3,3)],4:[(7,8),(8,4),(2,5)],8:[(3,1),(4,4),(2,4)],3:[(5,2),(7,3),(8,1)],2:[(4,5),(8,4)]}
l=[]
allPaths(graph,5,2,"")
l=[]
costOfAllPaths(graph,5,2,"",0)
l=[]
s=[]
min_c,min_path=minCostPath(graph,5,2,"",0,9999999,"")
print(f"minimum cost path is {'->'.join(min_path)} with minimum cost = {min_c}")
print(allPossiblePaths(graph,5))
print(Bfs(graph,s))
