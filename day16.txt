1.Longest Palindromic Number:
//code//
def Palindrome(a,start,end):
    if start>=end:
        return True
    if a[start]==a[end]:
        Palindrome(a,start+1,end-1)
    else:
        return False
    return True
print(Palindrome("aaaa",0,len("aaaa")-1))
def LongestPalindromicSubstring(a):
    i=0
    max=0
    sub=""
    while i<len(a)-1:
        j=i+1
        print(a[i:j])
        while j<len(a):
            if Palindrome(a[i:j+1],i,j-1):
                if j-i>max:
                    max=j-i
                    sub=a[i:j+1]
                j+=1
            i+=1
    print(sub,max)
LongestPalindromicSubstring("abdbsdabca")
o/p:
True
a
ab 1
2.Take I/p as 5 school,word,world,scholar,apple insert,search and delete operations:
//code//
def insert(a):
    l.add(a)
def search(a):
    return a in l
def Prefix(a):
    k=len(a)
    count=0
    for word in l:
        if a==word[:k]:
            count=count+1
    return count
def delete(a):
    l.remove(a)
l=set()
n=int(input())
for i in range(n):
    b,a=input().split()
    if b=="1":
        insert(a)
    elif b=="2":
        print(search(a))
    elif b=="3":
        print(Prefix(a))
    else:
        delete(a)
o/p:
5
1 school
1 word
2 word
True
2 world
False
3 word
1
3.Use the tries and insert,delete,search the words:
//code//
class trie:
    def __init__(self):
        self.alpha={}
        self.count=0
        self.flag=0
    def insert(self,word):
        for char in word:
            if char in self.alpha:
                self=self.alpha[char]
                self.count+=1
            else:
                self.alpha[char]=trie()
                self=self.alpha[char]
        self.flag=1
    def search(self,word):
        for char in word:
            if char not in self.alpha:
                return 0
            self=self.alpha[char]
        return self.flag
    def prefix(self,word):
        for char in word:
            if char not in self.alpha:
                return 0
            self=self.alpha[char]
            self.count+=1
        return self.count
    
self=trie()
self.insert("world")
self.insert("word")
self.insert("apple")
print(self.search("app"))
print(self.prefix("wor"))
o/p:0
    2
4.use tries and print all prefix words:
//code//
class trie:
    def __init__(self):
        self.alpha={}
        self.count=0
        self.flag=0
    def insert(self,word):
        for char in word:
            if char in self.alpha:
                self=self.alpha[char]
                self.count+=1
            else:
                self.alpha[char]=trie()
                self=self.alpha[char]
        self.flag=1
    def search(self,word):
        for char in word:
            if char not in self.alpha:
                return False
            self=self.alpha[char]
        return self.flag
    def prefix(self,word):
        for char in word:
            if char not in self.alpha:
                return False
            self=self.alpha[char]
            self.count+=1
        return self.count
    def delete(self,word):
        for char in word:
            self=self.alpha[char]
            self.count-=1
    def suggestions(self,word):
        def words(s1,t,max,len):
            if t.flag==1:
                print(s1)
                if len>max:
                    max=len 
            for i in t.alpha:
                max=words(s1+i,t.alpha[i],max,len+1)
            return max  
        t=self
        s1=""
        len=0
        for char in word:
            if char in t.alpha:
                t=t.alpha[char]
                s1+=char
                len+=1
            else:
                return 0
        max=words(s1,t,0,len)
        return max
self=trie()
l=set()
n=int(input())
for i in range(n):
    b,a=input().split()
    if b=="1":
        self.insert(a)
    elif b=="2":
        print(self.search(a))
    elif b=="3":
        print(self.prefix(a))
    elif b=="4":
        self.suggestions(a)
    else:
        self.delete(a)
    
o/p:5
1 word
1 world
2 words
False
3 wo
2
4 wo
word
world