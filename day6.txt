1.Stack implementation using double linkedlist
//code//
class Node:
    def _init_(self,u):
        self.data=u
        self.prev=None
        self.next=None
class Dll:
    def _init_(self):
        self.head=None
        self.tail=None
    def addback(self,x):
        if(self.head==None):
            self.head=Node(x)
            self.tail=self.head
        else:
            self.tail.next=Node(x)
            self.tail.next.prev=self.tail
            self.tail=self.tail.next
    def isvalid(self):
        stack=[]
        temp=self.head
        count=0
        d={']':'[','}':'{',')':'('}
        while temp is not None:
            count+=1
            if temp.data=='[' or temp.data=='{' or temp.data=='(':
                stack.append(temp.data)
            else:
                if stack.pop()!=d[temp.data]:
                    return count
            temp=temp.next
        if len(stack)==0:
            return -1
        else:
            return count
    def display(self):       
        temp = self.head;          
        while(temp != None):        
            print(temp.data,end="->");    
            temp = temp.next;
            print("\n")

d=Dll
s=int(input())
for i in s:
    d.append(i)
print(d.isvalid())

o/p:[{}]
    -1
    [(}]
     2

2.Find coprime numbers
//code//
def coprime(a,b):
    for i in range(2,(min(a,b)//2)+1):
        if a%i==0 and b%i==0:
            return False
        return True
a=int(input())
b=int(input())
print(coprime(a,b))
o/p:4
    9
    True
3.Find even odd difference
//code//
class Node:
    def _init_(self,u):
        self.data=u
        self.prev=None
        self.next=None
class dll:
    def _init_(self):
        self.head=None
        self.tail=None
    def addback(self,x):
        if(self.head==None):
            self.head=Node(x)
            self.tail=self.head
        else:
            self.tail.next=Node(x)
            self.tail.next.prev=self.tail
            self.tail=self.tail.next
    

    def even_odd_sum_difference(self,t,es,os):
        if t is None:
            return abs(es-os)  
        if t.data % 2 == 0:
            es += t.data
        else:
            os+= t.data
        return self.even_odd_sum_difference(t.next,es,os)
    def prime(self,t,c):
        if(t==None):
            return c
        def pnt(s,n):
            if(s>=(n//2)+1):
                return 1
            if(n%s==0):
                return 0
            return pnt(s+1,n)
        if(pnt(2,t.data)):
            c+=1
            return self.prime(t.next,c)    
    
    def display(self):       
        temp = self.head;          
        while(temp != None):        
            print(temp.data,end="->");    
            temp = temp.next;
            print("\n")
d=dll()
d.addback(1)
d.addback(2)
d.addback(3)
d.addback(4)
d.addback(8)
d.addback(7)
d.display()
print(d.even_odd_sum_difference(d.head,0,0))
print(d.prime(t,c))
4.class Node:
    def init(self,data):
        self.data=data
        self.next=None
        self.previous=None

class DLL:
    def init(self) -> None:
        self.head=None
        self.tail=None
    def addBack(self,x):
        if self.head is None:
            self.head=Node(x)
            self.tail=self.head
        else:
            self.tail.next=Node(x)
            self.tail.next.previous=self.tail
            self.tail=self.tail.next
    
    def addFront(self,x):
        if self.head is None:
            self.head=Node(x)
            self.tail=self.head
        else:
            self.head.previous=Node(x)
            self.head.previous.next=self.head
            self.head=self.head.previous

    def addMiddle(self,x,y):
        if self.head is None:
            self.head=Node(x)
            self.tail=self.head
        else:
            temp=self.head
            while temp.data!=y:
                temp=temp.next
            t=Node(x)
            t.next=temp.next
            t.previous=temp
            temp.next.previous=t
            temp.next=t

    def display(self):
        temp=self.head
        while temp!=None:
            print(temp.data,end="->")
            temp=temp.next
        print("\n")
    def rev_display(self):
        temp=self.tail
        while temp!=None:
            print(temp.data,end="->")
            temp=temp.previous
        print("\n")
    def search(self,key):
        temp1=self.head
        temp2=self.tail
        
        while temp1!=temp2.next:
            print(temp1.data,temp2.data)
            if temp1.data==key or temp2.data==key:
                print("found")
                break
            temp1=temp1.next
            temp2=temp2.previous
        else:
            if temp1.data==key:
                print("found")
            else:
                print("Not found")

    def length(self):
        temp1=self.head
        temp2=self.tail
        t1_length=0
        while (temp1!=temp2.next and temp1!=temp2):
            t1_length+=1
            temp1=temp1.next
            temp2=temp2.previous
        
        if temp1==temp2:
            print("odd")
            print(t1_length*2+1)
        else:
            print("even")
            print(t1_length*2)
        
    def ispalindromic(self):
        temp1=self.head
        temp2=self.tail
        
        while (temp1!=temp2.next and temp1!=temp2):
            if temp1.data!=temp2.data:
                print("Not a palindrome")
                break
            temp1=temp1.next
            temp2=temp2.previous
        else:
            print("palindrome")

    def modify(self):
        temp1=self.head
        temp2=self.tail
        while (temp1!=temp2.next):
            temp1=temp1.next
            temp2=temp2.previous
            temp2=temp2.next
            temp3=self.head
            while temp2 is not None:
                temp3.data,temp2.data=temp2.data,temp3.data
                temp3=temp3.next
                temp2=temp2.next
                self.tail.next=self.head
                self.head.previous=self.tail
        temp2.next=None
        temp1.previous=None
        self.tail=temp2
        self.head=temp1   

    def swap(self):
        p=current=self.head
        n=self.head.next
        self.head=self.head.next
        while current is not None and current.next is not None:
            current.next=current.next
            n.next=p
            n.previous=p.previous
            current.previous=n
            p.next=n
            current,p=p,current
            p=next
            current=current.next.next
            n=n.next.next
    def KthLargestFactor(num,k):
        current=self.head
        factor=[]
        for i in range(1,num+1):
            if num%i==0:
                factor.append(i)
            return factor           
d=DLL()
d.addBack(1)
d.addBack(2)
d.addBack(3)
d.addBack(4)
d.addBack(5)
d.addBack(6)
d.addBack(7)
d.addBack(8)
d.addBack(9)
d.addBack(10)
d.display()
d.rev_display()
d.search(7)
d.length()
d.ispalindromic()
d.swap()
d.display()