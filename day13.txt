1.Print trapped Water in between Buildings:
//code//
def trappedWater(height):
    if not height:
        return 0
    n=len(height)
    left=[0]*n
    right=[0]*n
    water=0
    left[0]=height[0]
    for i in range(1, n):
        left[i]=max(left[i-1],height[i])
    right[n-1]=height[n-1]
    for i in range(n-2,-1,-1):
        right[i]=max(right[i+1],height[i])
    for i in range(n):
        water+=min(left[i],right[i])-height[i]
    return water
#height=[2,5,2,3,6,7,1,0,5,7]    o/p:20
#height=[4,3,4,5,6,1,0,6,7]
height=[9,4,5,6,2,4]
print(trappedWater(height))
#height=building
o/p:5
2.Print Minimum Number of coins Uing dynamic programming:
//code//
def noofCoins(coins,k):
    dp=[]
    for i in range(len(coins)):
        dp.append([0]*(k+1))
    for i in range(k+1):
        if i%coins[0]==0:
            dp[0][i]=i//coins[0]
        else:
            dp[0][i]=0
    i=1
    while i<len(coins):
        j=0
        while j<=k:
            if j<coins[i]:
               dp[i][j]=dp[i-1][j]
            else:
                dp[i][j]=min(1+dp[i][j-coins[i]],dp[i-1][j])
            j+=1
        i+=1
    for i in dp:
        print(*i)
coins=[1,3,4,5]
k=17
noofCoins(coins,k)
o/p:0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
0 1 2 1 2 3 2 3 4 3 4 5 4 5 6 5 6 7
0 1 2 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5
0 1 2 1 1 1 2 2 2 2 2 3 3 3 3 3 4 4
3.How a person can travel in possible Ways:
I/p:- - - -
    - - - -
    - - - -
//code//
def travel(m,n,i,j):
    if j>=m or i>=n or i<0 or j<0 :
        return 0
    if j==m-1 and i==n-1:
        return 1
    return travel(m,n,i,j+1)+travel(m,n,i+1,j)
print(travel(4,3,0,0))

o/p:10
4.print Total paths to travel:
//code//
def travel(m,n,i,j,vi=[]):
    c=0
    if j>=m or i>=n or i<0 or j<0 :
        return 0
    if j==m-1 and i==n-1:
        return 1
    vi.append((i,j))
    if (i,j+1) not in vi:
        c+=travel(m,n,i,j+1,vi)
    if (i-1,j) not in vi:
        c+=travel(m,n,i-1,j,vi)
    if (i+1,j) not in vi:
        c+=travel(m,n,i+1,j,vi)
    if (i,j-1) not in vi:
        c+=travel(m,n,i,j-1,vi)
    vi.pop()
    print(vi)
    return c

print(travel(4,3,0,0))
o/p:38
4.Take obstacle at 1,2 and print the possible ways:
//code//
def travel(m,n,i,j,a,b,vi=[]):
    c=0
    if j>=m or i>=n or i<0 or j<0 or (i==a and j==b):
        return 0
    if j==m-1 and i==n-1:
        return 1
    vi.append((i,j))
    if (i,j+1) not in vi:
        c+=travel(m,n,i,j+1,a,b,vi)
    if (i-1,j) not in vi:
        c+=travel(m,n,i-1,j,a,b,vi)
    if (i+1,j) not in vi:
        c+=travel(m,n,i+1,j,a,b,vi)
    if (i,j-1) not in vi:
        c+=travel(m,n,i,j-1,a,b,vi)
    vi.pop()
    return c
print(travel(4,3,0,0,1,2))
o/p:7
