1.Preorder,Postorder and Inorder Traversal on Bst:
//code//
class Tree:
    def _init_(self,u=None):
        self.root=u
        if self.root:
            self.right=Tree()
            self.left=Tree()
        else:
            self.right=None
            self.left=None
    def isempty(self):
        return self.root==None
    def insert(self,data):
        if self.isempty():
            self.root=data
            self.left=Tree()
            self.right=Tree()
            print(format(self.root))
        elif data < self.root:
            self.left.insert(data)
            return
        elif data > self.root:
            self.right.insert(data)
        elif data == self.root:
            return
    def inorder(self):
        if self.isempty():
            return []
        else:
            return self.left.inorder()+[self.root]+self.right.inorder()
            self.create(root.right,x)
    def Preorder(self):
        if self.isempty():
            return []
        else:
            return [self.root]+self.left.Preorder()+self.right.Preorder()
            self.create(self.root,x)
    def Postorder(self):
        if self.isempty():
            return []
        else:
            return self.left.Postorder()+self.right.Postorder()+[self.root]
            self.create(self.left,x)
t=Tree(5)
t.insert(5)
t.insert(10)
t.insert(3)
t.insert(6)
t.insert(7)
print(t.inorder())
print("inorder traversal")
print(t.Preorder())
print("Preorder traversal")
print(t.Postorder())
print("Postorder traversal")
o/p:>>> %Run -c $EDITOR_CONTENT
10
3
6
7
[3, 5, 6, 7, 10]
inorder traversal
[5, 3, 10, 6, 7]
Preorder traversal
[3, 7, 6, 10, 5]
Postorder traversal
2.Many implementations on Tree:
//code//
class Node:
    def _init_(self,val) -> None:
        self.left=None
        self.right=None
        self.data=val
class BST:
    def _init_(self) -> None:
        self.root=None
    def addNode(self,root,val):
        if root is None:
            return Node(val)
        elif root.data>val:
            root.left=self.addNode(root.left,val)
        else:
            root.right=self.addNode(root.right,val)
        return root
    def inorder(self,root):
        if root is None:
            return 
        self.inorder(root.left)
        print(root.data,end=" ")
        self.inorder(root.right)
    def preorder(self,root,ans=[]):
        if root is None:
            return []
        ans+=[root.data]
        ans+=self.preorder(root.left)
        ans+=self.preorder(root.right)
        return ans
    def postorder(self,root,ans=[]):
        if root is None:
            return []
        ans+=self.postorder(root.left)
        ans+=self.postorder(root.right)
        ans+=[root.data]
        return ans
    def sum(self,root,s=0):
        if root is None:
            return 0
       
        return root.data+self.sum(root.left)+self.sum(root.right)
    def eosum(self,root,es=0,os=0):
        if root is None:
            return (0,0)
        
        es,os=self.eosum(root.left)
        e,o=self.eosum(root.right)
        es+=e
        os+=o
        if root.data%2==0:
            es+=root.data
        else:
            os+=root.data
        return (es,os)
    def even_sum(self,root):
        if root is None:
            return 0
        if root.data%2==0:
            return root.data+self.even_sum(root.left)+self.even_sum(root.right)
        else:
            return self.even_sum(root.left)+self.even_sum(root.right)
    def odd_sum(self,root):
        if root is None:
            return 0
        if root.data%2:
            return root.data+self.odd_sum(root.left)+self.odd_sum(root.right)
        else:
            return self.odd_sum(root.left)+self.odd_sum(root.right)
    def eodiff(self,root):
        if root==None:
           return 0
        if root.data%2==0:
          return root.data+self.eodiff(root.left)+self.eodiff(root.right)
        else:
            return (self.eodiff(root.left)+self.eodiff(root.left)+self.eodiff(root.right)-root.data)
    def Height(self,root,left=0,right=0):
        if root is None:
            return
        if root.left is None and root.right is None:
            return 0
        if root.left:
            left=1+self.Height(root.left)
        if root.right:
            right=1+self.Height(root.right)
        return max(left,right)
    def Balanced(self,root):
        return abs(self.Height(root.left)-self.Height(root.right))
        if (Balanced(root)):
            print("Balanced")
        else:
            print("not Balanced")
    def SumofLeafnodes(self,root,sum=0):
        if root.left is None and root.right is None:
            sum+=1
            return sum
        if root.left:
            sum+=self.SumofLeafnodes(root.left,sum)
        if root.right:
            sum+=self.SumofLeafnodes(root.right,sum)
        return sum
    def search(self,root,x=0):
        if root==None:
            return "NotFound"
        if root.data==x:
            return "Found"
        if root.data>x:
            self.search(root.left,x)
            return "NotFound"
        else:
            self.search(root.right,x)
            return "Found"
    def depth(self,root,y=0,c=0):
        if root is None:
            return -1
        if root.data==y:
            return c
        if root.data>y:
            self.depth(root.left,y,c+1)
        else:
            self.depth(root.right,y,c+1)         
nodes=list(map(int,input().split(" ")))
tree=BST()

tree.root=Node(nodes[0])
for i in range(1,len(nodes)):
    tree.addNode(tree.root,nodes[i])
print("Inorder")
tree.inorder(tree.root)
print("Preorder")
tree.preorder(tree.root)
print("Postorder")
tree.postorder(tree.root)
print("\n")
print("sum: " ,tree.
      sum(tree.root))
es,os=tree.eosum(tree.root)
print(f'even sum= {es},odd sum ={os}')
print("only even sum : ",tree.even_sum(tree.root))
print("only odd sum : ",tree.odd_sum(tree.root))
print("difference of even and odd sum",abs(tree.eodiff(tree.root)))
print("height of the tree",tree.Height(tree.root))
print("balanced of the tree",tree.Balanced(tree.root))
print("sum of no of leaf nodes",tree.SumofLeafnodes(tree.root,sum=0))
print("search the element",tree.search(tree.root,x=0))
print("depth of tree ",tree.depth(tree.root,y=0,c=0))
o/p:
>>> %Run -c $EDITOR_CONTENT
10 5 20 2 7 6 8
Inorder
2 5 6 7 8 10 20 Preorder
Postorder
sum:  58
even sum= 46,odd sum =12
only even sum :  46
only odd sum :  12
difference of even and odd sum 42
height of the tree 3
balanced of the tree 2
sum of no of leaf nodes 17
search the element NotFound
depth of tree  None
>>> 
